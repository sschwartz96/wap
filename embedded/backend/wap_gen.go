// Code generated by wap; DO NOT EDIT.

package main

import (
	"html/template"
	"log"
	"net/http"

	"github.com/julienschmidt/httprouter"
)

var (
	tmplObj *template.Template
)

type Path string

type Page struct {
	Title       string
	Description string
	Author      string
	CSS         string // css file location
	JS          string // js file location
}

type App struct {
	Pages map[Path]Page
}

var wapApp = &App{
	Pages: map[Path]Page{
		// list pages
		"/": {
			Title:       "Home",
			Description: "This is description",
			Author:      "Sam Schwartz",
			CSS:         "./public/build/app.css",
			JS:          "./public/build/app.js",
		},
	},
}

func register(r *httprouter.Router) {
	var err error
	tmplObj, err = template.New("template").Parse(htmlTemplate)
	if err != nil {
		log.Fatalf("Could not parse html template, error: %v", err)
	}
	for path, page := range wapApp.Pages {
		r.GET(string(path), createHandler(page))
	}

	// serve files
	r.ServeFiles("/public/build/*filepath", http.Dir("./public/build"))
}

func createHandler(pageData Page) httprouter.Handle {
	return func(res http.ResponseWriter, req *http.Request, p httprouter.Params) {
		err := tmplObj.Execute(res, pageData)
		if err != nil {
			log.Fatalf("Error parsing template with page data: %v", err)
		}
	}
}

var htmlTemplate = `<html>
<head>
  <meta charset="utf-8">

  <title>{{ .Title }}</title>
  <meta name="description" content="{{ .Description }}">
  <meta name="author" content="{{ .Author }}">

  {{ if .CSS }}
	  <link rel="stylesheet" href="{{ .CSS }}">
  {{ end }}

  <script src="{{ .JS }}" defer></script>
</head>

<body>
</body>
</html>`
